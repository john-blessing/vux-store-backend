package com.xiaofu;

import ch.qos.logback.core.util.FileUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.Part;
import java.awt.image.BufferedImage;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;

/**
 * Created by keifc on 2017/8/16.
 */
@Controller    // This means that this class is a Controller
@RequestMapping(value = "/api") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EmpRepository empRepository;

    @RequestMapping(value = "/add", method = RequestMethod.POST) // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser(@RequestParam String username
            , @RequestParam String phone) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Emp n = new Emp();
        n.setId(0);
        n.setUsername(username);
        n.setPhone(phone);
        empRepository.save(n);
        return "Saved";
    }

    @GetMapping(value = "/all")
    public @ResponseBody
    Iterable<Emp> getAllUsers() {
        // This returns a JSON or XML with the users
        return empRepository.findAll();
    }

    @RequestMapping(value = "/do", method = RequestMethod.POST)
    public @ResponseBody
    String getAttribut(@RequestParam String student_id) {
        return student_id;
    }

    @RequestMapping(value = "/update", method = RequestMethod.POST)
    public @ResponseBody
    String updateUser(@RequestBody Emp emp) {

        int result = empRepository.updateUser(emp.getUsername(), emp.getPhone(), emp.getId());
        if (result > 0) {
            return "update";
        } else {
            return "fail";
        }

    }

    @RequestMapping(value = "/upload", method = RequestMethod.POST)
    public @ResponseBody
    String uploadFile(HttpServletRequest request) {

        // Create path components to save the file
        String name = request.getParameter("filename");
        Part filePart = null;
        OutputStream out = null;
        InputStream filecontent = null;

        try {
            filePart = request.getPart("sampleFile");
            out = new FileOutputStream("./uploads/" + name);
            filecontent = filePart.getInputStream();
            byte[] range = new byte[1024 * 10];
            int read = 0;
            while ((read = filecontent.read(range)) != -1) {
                out.write(range, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "fail!";
        } catch (ServletException e) {
            e.printStackTrace();
            return "fail!";
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
                if (filecontent != null) {
                    filecontent.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return "success!";
        }
    }

    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    String deleteUser(@PathVariable int id) {
        int result = empRepository.deleteById(id);
        if (result == 1) {
            return "success!";
        } else {
            return "fail";
        }
    }
}
